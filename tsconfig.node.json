{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo", // 指定增量编译信息的存储位置
    "target": "ES2022", // 编译生成的目标版本代码
    "useDefineForClassFields": true, // * 这个编译条件只会在 ES2021 之前的版本生效，用于需要精确控制字段属性的场景。当启用该选项时，class中的字段声明会从使用赋值操作符（如foo = 100）的方式转变为使用 Object.defineProperty 方法进行定义。
    "lib": ["DOM", "ES2023"], // 指定我们需要用到的库，也可以不配置，直接根据 target 来获取
    "jsx": "preserve", // jsx 的处理方式(保留原有的jsx格式)
    "jsxImportSource": "@vue/runtime-dom",
    "sourceMap": true, // 是否生成 sourceMap 文件
    "resolveJsonModule": true, // 允许导入 JSON 文件
    "esModuleInterop": true, // 允许从没有设置默认导出的模块中默认导入
    // ? 打包识别，加上解析相关的东西打包后不会报错
    "baseUrl": "./", // 解析非相对模块名称的基准目录
    "paths": {
      "@": ["src"],
      "@/*": ["src/*"]
    }, // 设置模块名称到基于 baseUrl 的路径映射
    "module": "ESNext", // 生成代码使用的模块化
    "skipLibCheck": true,
    "typeRoots": [
      "node_modules/@types", // 默认值
      "src/types",
      "element-plus/global"
    ], // 指定类型声明文件（.d.ts文件）的根目录

    /* Bundler mode */
    "moduleResolution": "node", // 用于指定编译器在查找导入模块时所遵循的策略。
    "allowImportingTsExtensions": true, // 是否需要显示添加 .ts 后缀
    "isolatedModules": true, // 以隔离模块的方式编译每个模块，这意味着每个模块将被视为一个独立的模块，不会与其他模块共享全局状态。
    "moduleDetection": "force", // * 强制使用 ES Module，即使文件扩展名为.js。（用于控制模块解析的行为。）
    "noEmit": true, // TypeScript编译器在执行编译时将不会生成任何输出文件

    /* 类型检查规则 */
    "strict": true, // 开启一系列的类型检查规则，以确保代码的健壮性和安全性。
    "noUnusedLocals": true, // 是否报告未使用的局部变量。
    "noUnusedParameters": true, // 是否对未使用的函数参数发出警告。
    "noFallthroughCasesInSwitch": true, // 检查 switch 语句中的 case 是否存在穿透（fall-through）情况。
    "noUncheckedSideEffectImports": true // 验证那些可能产生副作用的导入，例如CSS文件的导入。
  },
  "include": [
    "vite.config.ts",
    "src/**/*.ts",
    "src/**/*.d.ts",
    "src/**/*.tsx",
    "src/**/*.vue"
  ] // 指定需要编译的文件或文件夹
}
